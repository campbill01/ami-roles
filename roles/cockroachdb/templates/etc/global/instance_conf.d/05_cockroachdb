#!/bin/bash

if [ ! -f /etc/global/user_data ]; then
	logger "cockroachdb config: Getting user data"
	#
  if [ ! -d /etc/global ]; then
    mkdir /etc/global
  fi
  # user data takes some time to show up
  until [[ -f  /etc/global/user_data ]];
  do
	 curl -o /etc/global/user_data -s http://169.254.169.254/latest/user-data
   sleep 10
	done
  chmod 644 /etc/global/user_data
fi

grep '#!' /etc/global/user_data 
if [[ $? -eq 1 ]]; then
  . /etc/global/user_data
fi

#I need an ID
if [[ -z $ID ]]; then
  RANGE=20
  ID=$RANDOM
  let "ID %= $RANGE"
fi

EC2_REGION=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone/ | sed '$s/.$//')
IP=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)
##
# remove dns stuff
PEERS=cockroachdb.node-1.${EC2_REGION}.${DOMAIN},cockroachdb.node-2.${EC2_REGION}.${DOMAIN},cockroachdb.node-3.${EC2_REGION}.${DOMAIN}

# Add node from other 'datacenter' if defined
if [[ ! -z $CROSS_REGION_HOST ]]; then
   PEERS=${CROSS_REGION_HOST},${PEERS}
fi

if [[  $PEERS == "\/" || -z $PEERS  ]]; then
  logger "cockroachdb config: Something has gone wrong, setting peers to local ip"
  PEERS=${IP}  
fi

# update service with peer list
sed -i "s/PEERS/${PEERS}/" /etc/systemd/system/cockroachdb.service
sed -i "s/ADDR/${IP}/" /etc/systemd/system/cockroachdb.service
systemctl daemon-reload


# Also create single route53 resource 
logger "cockroachdb config: Done!"
if [[ $ID > 1 ]]; then
  let sleeptime=$ID*10
  sleep $sleeptime
fi

systemctl start cockroachdb